# ASV benchmark configuration for semiconductor_sim

[tool.asv]
# The name of the project being benchmarked
project = "semiconductor_sim"

# The project's homepage
project_url = "https://github.com/kennedym-ds/semiconductor_sim"

# The URL or local path of the source code repository for the
# project being benchmarked
repo = "."

# The Python project's subdirectory in your repo.  If missing or
# the empty string, the project is assumed to be located at the root
# of the repository.
# repo_subdir = ""

# Customizable commands for building, installing, and
# uninstalling the project. See asv.conf.json documentation.
#
# build_command = [
#     "python setup.py build",
#     "PIP_NO_BUILD_ISOLATION=false python -m pip wheel --no-deps --no-index -w {build_cache_dir} {build_dir}"
# ]
# install_command = ["python -m pip install --find-links {build_cache_dir} --no-deps --no-index {project}"]
# uninstall_command = ["return-code=any python -m pip uninstall -y {project}"]

# List of branches to test. If not provided, defaults to "master"
# (for git) or "default" (for mercurial).
# branches = ["main"]

# The DVCS being used.  If not set, it will be automatically
# determined from "repo" by looking at the protocol in the URL
# (if remote), or by looking for special directories, such as
# ".git" (if local).
# dvcs = "git"

# The tool to use to create environments.  May be "conda",
# "virtualenv" or other environment management tools supported by
# asv.  If missing or the empty string, the tool will be
# automatically determined by looking for tools on the PATH
# environment variable.
environment_type = "virtualenv"

# timeout in seconds for installing any dependencies in environment
# defaults to 10 min
# install_timeout = 600

# the base URL to show a commit for the project.
# show_commit_url = "http://github.com/owner/project/commit/"

# The Pythons you'd like to test against.  If not provided, defaults
# to the current version of Python used to run `asv`.
pythons = ["3.10", "3.11", "3.12"]

# The list of conda channel names to be searched for benchmark
# dependency packages in the specified order
# conda_channels = ["conda-forge", "defaults"]

# The matrix of dependencies to test.  Each key is the name of a
# package (in PyPI) and the values are version numbers.  An empty
# list or empty string indicates that the package is required but
# that any version is acceptable.  A null/~None indicates that the package
# is not required.
matrix = """
    numpy = [""]
    scipy = [""]
    matplotlib = [""]
"""

# Combinations of libraries/python versions can be excluded/included
# from the set to test. Each entry is a dictionary containing additional
# key-value pairs to include/exclude.
#
# An exclude entry excludes entries where all values match. An include
# entry includes entries where all values match.
#
# exclude = [
#     # Skip certain combinations
#     {"python": "2.7", "numpy": "1.8"},
# ]
#
# include = [
#     # additional combinations to test
#     {"python": "2.7", "numpy": "1.9"},
# ]

# The directory (relative to the current directory) that benchmarks are
# stored in.  If not provided, defaults to "benchmarks"
benchmark_dir = "benchmarks"

# The directory (relative to the current directory) to cache the Python
# environments in.  If not provided, defaults to "env"
env_dir = "env"

# The directory (relative to the current directory) that raw benchmark
# results are stored in.  If not provided, defaults to "results".
results_dir = "results"

# The directory (relative to the current directory) that the html tree
# should be written to.  If not provided, defaults to "html".
html_dir = "html"

# The number of characters to retain in the commit hashes.
# hash_length = 8

# `asv` will cache wheels of the measured project in this directory.
# Default is ".asv/wheels"
# wheel_cache_dir = ".asv/wheels"